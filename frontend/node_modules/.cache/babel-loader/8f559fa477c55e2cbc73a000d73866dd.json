{"ast":null,"code":"var _jsxFileName = \"/home/reia/cop4331LargeProjectApp/frontend/src/components/ForgotPW.js\";\nimport React, { useState } from 'react';\n\nvar jwt = require('jsonwebtoken');\n\nconst BASE_URL = 'https://cop4331-g25.herokuapp.com/';\n\nfunction ForgotPW() {\n  var username;\n  var password;\n  var passwordConf; //  password for token encryption\n\n  var ePassword = \"shhhhh\";\n  const [message, setMessage] = useState('');\n\n  const doForgotPW = async event => {\n    event.preventDefault(); // check confirm password\n\n    if (password.value != passwordConf.value) {\n      setMessage(\"Passwords do not match\");\n      return;\n    } // check for invalid password\n\n\n    if (password.value == null || password.value == \"\") {\n      setMessage(\"Invalid password\");\n      return;\n    }\n\n    var js = '{\"userName\":\"' + username.value + '\",\"Password\":\"' + password.value + '\"}';\n\n    try {\n      var token = jwt.sign(js, ePassword);\n      var tokenJSON = '{\"token\":\"' + token + '\"}';\n      const response = await fetch(BASE_URL + 'api/sendResetPassword', {\n        method: 'POST',\n        body: tokenJSON,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // verify returned token\n\n      var res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n\n      if (res.error != \"\") {\n        setMessage(res.error);\n      } else {\n        document.getElementById(\"loginDiv\").style.display = \"block\";\n        document.getElementById(\"signupDiv\").style.display = \"none\";\n        document.getElementById(\"ForgotDiv\").style.display = \"none\";\n        document.getElementById('loginResult').innerHTML = \"Email sent to verify new password, your password will not reset until you confirm via email.\";\n      }\n    } catch (e) {\n      alert(e.toString());\n      return;\n    }\n  }; // swap to login page\n\n\n  const gotoLogin = event => {\n    event.preventDefault();\n    document.getElementById(\"loginDiv\").style.display = \"block\";\n    document.getElementById(\"signupDiv\").style.display = \"none\";\n    document.getElementById(\"ForgotDiv\").style.display = \"none\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"ForgotDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: doForgotPW,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"inner-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Provide Your username and desired new password. You'll confirm your password change via your email.\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 138\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 144\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"forgotUsername\",\n    placeholder: \"Username\",\n    ref: c => username = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 99\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    id: \"forgotPW\",\n    placeholder: \"New Password\",\n    ref: c => password = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 101\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    id: \"forgotPWConfirm\",\n    placeholder: \"Confirm New Password\",\n    ref: c => passwordConf = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 120\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"forgotRecover\",\n    class: \"buttons\",\n    onClick: doForgotPW,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \" Recover Password \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 115\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"forgotToLogin\",\n    class: \"buttons\",\n    onClick: gotoLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Return to Login\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 111\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"ForgotResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, message));\n}\n\n;\nexport default ForgotPW;","map":{"version":3,"sources":["/home/reia/cop4331LargeProjectApp/frontend/src/components/ForgotPW.js"],"names":["React","useState","jwt","require","BASE_URL","ForgotPW","username","password","passwordConf","ePassword","message","setMessage","doForgotPW","event","preventDefault","value","js","token","sign","tokenJSON","response","fetch","method","body","headers","res","verify","JSON","parse","text","error","document","getElementById","style","display","innerHTML","e","alert","toString","gotoLogin","c"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nvar jwt = require('jsonwebtoken');\n\nconst BASE_URL = 'https://cop4331-g25.herokuapp.com/';\n\nfunction ForgotPW() {\n\n  var username;\n  var password;\n  var passwordConf;\n\n  //  password for token encryption\n  var ePassword = \"shhhhh\";\n\n  const [message, setMessage] = useState('');\n\n\n\n  const doForgotPW = async event => {\n    event.preventDefault();\n\n    // check confirm password\n    if (password.value != passwordConf.value) {\n      setMessage(\"Passwords do not match\")\n      return;\n    }\n\n    // check for invalid password\n    if (password.value == null || password.value == \"\") {\n      setMessage(\"Invalid password\");\n      return;\n    }\n\n    var js = '{\"userName\":\"'\n      + username.value\n      + '\",\"Password\":\"'\n      + password.value + '\"}';\n\n    try {\n      var token = jwt.sign(js, ePassword);\n\n      var tokenJSON = '{\"token\":\"' + token + '\"}';\n\n      const response = await fetch(BASE_URL + 'api/sendResetPassword',\n        { method: 'POST', body: tokenJSON, headers: { 'Content-Type': 'application/json' } });\n\n      // verify returned token\n      var res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n\n      if (res.error != \"\") {\n        setMessage(res.error);\n      }\n      else {\n\n        document.getElementById(\"loginDiv\").style.display = \"block\";\n        document.getElementById(\"signupDiv\").style.display = \"none\";\n        document.getElementById(\"ForgotDiv\").style.display = \"none\";\n\n        document.getElementById('loginResult').innerHTML = \"Email sent to verify new password, your password will not reset until you confirm via email.\";\n      }\n    }\n    catch (e) {\n      alert(e.toString());\n      return;\n    }\n  }\n\n  // swap to login page\n  const gotoLogin = event => {\n    event.preventDefault();\n\n    document.getElementById(\"loginDiv\").style.display = \"block\";\n    document.getElementById(\"signupDiv\").style.display = \"none\";\n    document.getElementById(\"ForgotDiv\").style.display = \"none\";\n  }\n\n\n  return (\n    <div id=\"ForgotDiv\">\n      <form onSubmit={doForgotPW}>\n        <span id=\"inner-title\">Provide Your username and desired new password. You'll confirm your password change via your email.</span><br /><br />\n        <input type=\"text\" id=\"forgotUsername\" placeholder=\"Username\" ref={(c) => username = c} /><br />\n        <input type=\"password\" id=\"forgotPW\" placeholder=\"New Password\" ref={(c) => password = c} /><br />\n        <input type=\"password\" id=\"forgotPWConfirm\" placeholder=\"Confirm New Password\" ref={(c) => passwordConf = c} /><br />\n        <button type=\"button\" id=\"forgotRecover\" class=\"buttons\" onClick={doForgotPW}> Recover Password </button> <br />\n        <button type=\"button\" id=\"forgotToLogin\" class=\"buttons\" onClick={gotoLogin}>Return to Login</button> <br />\n\n      </form>\n      <span id=\"ForgotResult\">{message}</span>\n    </div>\n  );\n};\n\nexport default ForgotPW;"]},"metadata":{},"sourceType":"module"}