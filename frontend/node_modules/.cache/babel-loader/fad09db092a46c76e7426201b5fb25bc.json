{"ast":null,"code":"var _jsxFileName = \"/home/reia/cop4331LargeProjectApp/frontend/src/components/DeniedPanel.js\";\nimport React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync';\n\nvar jwt = require('jsonwebtoken');\n\nconst BASE_URL = 'https://cop4331-g25.herokuapp.com/'; // admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction DeniedPanel() {\n  var search = '';\n  var res;\n  var res2; //  password for token encryption\n\n  var ePassword = \"shhhhh\";\n  const [message, setMessage] = useState('');\n  const [searchResults, setResults] = useState('');\n  const [tripList, setTripList] = useState('');\n\n  var _ud = localStorage.getItem('user_data');\n\n  var ud = JSON.parse(_ud); // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n\n  var userId = ud.id;\n  var firstName = ud.firstName;\n  var lastName = ud.lastName;\n  var userName = ud.userName; // search for trips on page load\n\n  useEffectAsync(async () => {\n    // Remove the old contact elements before the new ones are added\n    while (document.getElementById(\"DenTripList\").hasChildNodes()) {\n      document.getElementById(\"DenTripList\").removeChild(document.getElementById(\"DenTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      var token = jwt.sign(js, ePassword);\n      var tokenJSON = '{\"token\":\"' + token + '\"}'; // build and send JSON\n\n      let response = await fetch(BASE_URL + 'api/listTripsByAdmin', {\n        method: 'POST',\n        body: tokenJSON,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check the trip status\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === false && isNew === false)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          var token = jwt.sign(js, ePassword);\n          var tokenJSON = '{\"token\":\"' + token + '\"}'; // build and send JSON\n\n          let response = await fetch(BASE_URL + 'api/getById', {\n            method: 'POST',\n            body: tokenJSON,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          res2 = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n        } catch (e) {\n          alert(e.toString());\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var reasonDen = res[i].comments; // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = \"\" + ID;\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var reasonDenP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen; // add the <p>s to the content div\n\n        contentDiv.appendChild(reasonDenP); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"DenTripList\").appendChild(collButton);\n        document.getElementById(\"DenTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  }, []); // only re-run when the search term changes\n  // search denied trip by a specific term\n\n  const searchDen = async event => {\n    event.preventDefault(); // Remove the old contact elements before the new ones are added\n\n    while (document.getElementById(\"DenTripList\").hasChildNodes()) {\n      document.getElementById(\"DenTripList\").removeChild(document.getElementById(\"DenTripList\").lastChild);\n    }\n\n    var js = '{\"userName\":\"' + userName + '\"}';\n\n    try {\n      var token = jwt.sign(js, ePassword);\n      var tokenJSON = '{\"token\":\"' + token + '\"}'; // build and send JSON\n\n      let response = await fetch(BASE_URL + 'api/listTripsByAdmin', {\n        method: 'POST',\n        body: tokenJSON,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n      res = res.Results;\n    } catch (e) {\n      alert(e.toString());\n    } // check for null results\n    // check for null results\n\n\n    if (typeof res !== 'undefined') {\n      // after recieving results, select the ones we need and build their dropdowns\n      for (var i = 0; i < res.length; i++) {\n        // check the trip status\n        var isApproved = res[i].isApproved;\n        var isNew = res[i].isNew;\n\n        if (!(isApproved === false && isNew === false)) {\n          continue;\n        } // get user name of user who requested trip\n\n\n        js = '{\"Id\":\"' + res[i].userId + '\"}';\n\n        try {\n          var token = jwt.sign(js, ePassword);\n          var tokenJSON = '{\"token\":\"' + token + '\"}'; // build and send JSON\n\n          let response = await fetch(BASE_URL + 'api/getById', {\n            method: 'POST',\n            body: tokenJSON,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          res2 = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n        } catch (e) {\n          alert(e.toString());\n        } // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n        if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n          continue;\n        } // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n\n\n        var ID = res[i]._id;\n        var uID = res2.userName;\n        var loc1 = res[i].startLocation;\n        var loc2 = res[i].destination;\n        var departTime = res[i].startTime;\n        var reason = res[i].purpose;\n        var reasonDen = res[i].comments; // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n\n        var collButton = document.createElement(\"button\");\n        collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n        collButton.id = ID + \"-coll\";\n        collButton.className = \"collapsible\"; // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n\n        var contentDiv = document.createElement(\"div\");\n        contentDiv.id = \"\" + ID;\n        contentDiv.className = \"content\"; // create the <p> for the content div\n\n        var reasonDenP = document.createElement(\"p\"); // fill <p>s with content from json\n\n        reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen; // add the <p>s to the content div\n\n        contentDiv.appendChild(reasonDenP); // add collButton and contentDiv to TripList\n\n        document.getElementById(\"DenTripList\").appendChild(collButton);\n        document.getElementById(\"DenTripList\").appendChild(contentDiv); // add event listener\n\n        collButton.addEventListener(\"click\", function () {\n          this.classList.toggle(\"active\");\n          var content = this.nextElementSibling;\n\n          if (content.style.maxHeight) {\n            content.style.maxHeight = null;\n          } else {\n            content.style.maxHeight = content.scrollHeight + \"px\";\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"DeniedPanel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"searchPanelDen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"searchDenText\",\n    placeholder: \"Search\",\n    ref: c => search = c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    id: \"searchDenButton\",\n    class: \"buttons\",\n    onClick: searchDen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }\n  }, \" Search \")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"DenTripListDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"denTripSearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"DenTripList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }\n  }));\n}\n\n;\nexport default DeniedPanel;","map":{"version":3,"sources":["/home/reia/cop4331LargeProjectApp/frontend/src/components/DeniedPanel.js"],"names":["React","useState","useEffectAsync","jwt","require","BASE_URL","DeniedPanel","search","res","res2","ePassword","message","setMessage","searchResults","setResults","tripList","setTripList","_ud","localStorage","getItem","ud","JSON","parse","userId","id","firstName","lastName","userName","document","getElementById","hasChildNodes","removeChild","lastChild","js","token","sign","tokenJSON","response","fetch","method","body","headers","verify","text","Results","e","alert","toString","i","length","isApproved","isNew","ID","_id","uID","loc1","startLocation","loc2","destination","departTime","startTime","reason","purpose","reasonDen","comments","collButton","createElement","innerHTML","className","contentDiv","reasonDenP","appendChild","addEventListener","classList","toggle","content","nextElementSibling","style","maxHeight","scrollHeight","searchDen","event","preventDefault","indexOf","value","c"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport useEffectAsync from '../components/useEffectAsync';\nvar jwt = require('jsonwebtoken');\n\nconst BASE_URL = 'https://cop4331-g25.herokuapp.com/';\n// admin is generally referred to as user (ex: user_data) and I'll be calling the users the admin oversees clients\n\nfunction DeniedPanel() {\n    var search = '';\n    var res;\n    var res2;\n\n    //  password for token encryption\n    var ePassword = \"shhhhh\";\n\n    const [message, setMessage] = useState('');\n    const [searchResults, setResults] = useState('');\n    const [tripList, setTripList] = useState('');\n\n    var _ud = localStorage.getItem('user_data');\n    var ud = JSON.parse(_ud);\n\n    // TODO - depends on vars we have stored for admin, assuming we'll have some way to get the adminUser's clients\n    var userId = ud.id;\n    var firstName = ud.firstName;\n    var lastName = ud.lastName;\n    var userName = ud.userName;\n\n    // search for trips on page load\n    useEffectAsync(async () => {\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"DenTripList\").hasChildNodes()) {\n            document.getElementById(\"DenTripList\").removeChild(document.getElementById(\"DenTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            var token = jwt.sign(js, ePassword);\n\n            var tokenJSON = '{\"token\":\"' + token + '\"}';\n\n            // build and send JSON\n            let response = await fetch(BASE_URL + 'api/listTripsByAdmin',\n                { method: 'POST', body: tokenJSON, headers: { 'Content-Type': 'application/json' } });\n\n            res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check the trip status\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === false && isNew === false)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    var token = jwt.sign(js, ePassword);\n\n                    var tokenJSON = '{\"token\":\"' + token + '\"}';\n\n                    // build and send JSON\n                    let response = await fetch(BASE_URL + 'api/getById',\n                        { method: 'POST', body: tokenJSON, headers: { 'Content-Type': 'application/json' } });\n\n                    res2 = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var reasonDen = res[i].comments;\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = \"\" + ID;\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var reasonDenP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(reasonDenP);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"DenTripList\").appendChild(collButton);\n                document.getElementById(\"DenTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }, []); // only re-run when the search term changes\n\n\n\n\n\n    // search denied trip by a specific term\n    const searchDen = async event => {\n        event.preventDefault();\n\n        // Remove the old contact elements before the new ones are added\n        while (document.getElementById(\"DenTripList\").hasChildNodes()) {\n            document.getElementById(\"DenTripList\").removeChild(document.getElementById(\"DenTripList\").lastChild);\n        }\n\n        var js = '{\"userName\":\"' + userName + '\"}';\n\n        try {\n            var token = jwt.sign(js, ePassword);\n\n            var tokenJSON = '{\"token\":\"' + token + '\"}';\n\n            // build and send JSON\n            let response = await fetch(BASE_URL + 'api/listTripsByAdmin',\n                { method: 'POST', body: tokenJSON, headers: { 'Content-Type': 'application/json' } });\n\n            res = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n            res = res.Results;\n        }\n\n        catch (e) {\n            alert(e.toString());\n        }\n\n        // check for null results\n        // check for null results\n        if (typeof res !== 'undefined') {\n\n            // after recieving results, select the ones we need and build their dropdowns\n            for (var i = 0; i < res.length; i++) {\n                // check the trip status\n                var isApproved = res[i].isApproved;\n                var isNew = res[i].isNew;\n\n                if (!(isApproved === false && isNew === false)) {\n                    continue;\n                }\n\n                // get user name of user who requested trip\n                js = '{\"Id\":\"' + res[i].userId + '\"}';\n                try {\n                    var token = jwt.sign(js, ePassword);\n\n                    var tokenJSON = '{\"token\":\"' + token + '\"}';\n\n                    // build and send JSON\n                    let response = await fetch(BASE_URL + 'api/getById',\n                        { method: 'POST', body: tokenJSON, headers: { 'Content-Type': 'application/json' } });\n\n                    res2 = jwt.verify(JSON.parse(await response.text()).token, ePassword);\n                }\n                catch (e) {\n                    alert(e.toString());\n                }\n\n                // TODO - add search by search var, and possibly add multiple types of searches~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                if (search !== \"\" && res2.userName.indexOf(search.value) === -1) {\n                    continue;\n                }\n\n\n\n                // trip vars (from user request) - (ID refers to the trip request's ID, uID refers to the ID of the user who requested the trip)\n                var ID = res[i]._id;\n                var uID = res2.userName;\n                var loc1 = res[i].startLocation;\n                var loc2 = res[i].destination;\n                var departTime = res[i].startTime;\n                var reason = res[i].purpose;\n                var reasonDen = res[i].comments;\n\n                // make new button for the collapsible component, and give it an ID that corresponds to the ID # of the trip request in the database (\"#-coll\")\n                var collButton = document.createElement(\"button\");\n                collButton.innerHTML = \"DENIED: \" + uID + \"'s Trip to \" + loc2;\n                collButton.id = ID + \"-coll\";\n                collButton.className = \"collapsible\";\n\n                // make new div for the content, and give it an ID that corresponds to the trip request ID in the database (\"#\")\n                var contentDiv = document.createElement(\"div\");\n                contentDiv.id = \"\" + ID;\n                contentDiv.className = \"content\";\n\n                // create the <p> for the content div\n                var reasonDenP = document.createElement(\"p\");\n\n                // fill <p>s with content from json\n                reasonDenP.innerHTML = \"Reason For Denial: \" + reasonDen;\n\n                // add the <p>s to the content div\n                contentDiv.appendChild(reasonDenP);\n\n                // add collButton and contentDiv to TripList\n                document.getElementById(\"DenTripList\").appendChild(collButton);\n                document.getElementById(\"DenTripList\").appendChild(contentDiv);\n\n                // add event listener\n                collButton.addEventListener(\"click\", function () {\n                    this.classList.toggle(\"active\");\n                    var content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    }\n                    else {\n                        content.style.maxHeight = content.scrollHeight + \"px\";\n                    }\n                })\n            }\n        }\n    }\n\n\n    return (\n        <div id=\"DeniedPanel\">\n            <br />\n            <div id=\"searchPanelDen\" >\n\n                <input type=\"text\" id=\"searchDenText\" placeholder=\"Search\" ref={(c) => search = c} />\n                <button type=\"button\" id=\"searchDenButton\" class=\"buttons\" onClick={searchDen}> Search </button>\n            </div>\n\n            <div id=\"DenTripListDiv\">\n                <span id=\"denTripSearchResult\"></span>\n                <div id=\"DenTripList\">\n\n                </div>\n            </div>\n\n            <br /><br />\n\n        </div>\n    );\n};\n\n\nexport default DeniedPanel;"]},"metadata":{},"sourceType":"module"}